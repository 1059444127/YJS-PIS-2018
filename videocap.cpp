// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "videocap.h"

// Dispatch interfaces referenced by this interface
#include "devices.h"
#include "VideoFormats.h"
#include "VideoInputs.h"

/////////////////////////////////////////////////////////////////////////////
// CVideoCap

IMPLEMENT_DYNCREATE(CVideoCap, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CVideoCap properties

short CVideoCap::GetDevice()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetDevice(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

short CVideoCap::GetVideoFormat()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetVideoFormat(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

CDevices CVideoCap::GetDevices()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3, VT_DISPATCH, (void*)&pDispatch);
	return CDevices(pDispatch);
}

void CVideoCap::SetDevices(LPDISPATCH propVal)
{
	SetProperty(0x3, VT_DISPATCH, propVal);
}

CVideoFormats CVideoCap::GetVideoFormats()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4, VT_DISPATCH, (void*)&pDispatch);
	return CVideoFormats(pDispatch);
}

void CVideoCap::SetVideoFormats(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetVideoCompressors()
{
	LPDISPATCH result;
	GetProperty(0x5, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetVideoCompressors(LPDISPATCH propVal)
{
	SetProperty(0x5, VT_DISPATCH, propVal);
}

BOOL CVideoCap::GetCaptureMode()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetCaptureMode(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

CString CVideoCap::GetCaptureFileName()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CVideoCap::SetCaptureFileName(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

LPDISPATCH CVideoCap::GetBrightness()
{
	LPDISPATCH result;
	GetProperty(0x8, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetBrightness(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetContrast()
{
	LPDISPATCH result;
	GetProperty(0x9, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetContrast(LPDISPATCH propVal)
{
	SetProperty(0x9, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetHue()
{
	LPDISPATCH result;
	GetProperty(0xa, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetHue(LPDISPATCH propVal)
{
	SetProperty(0xa, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetSaturation()
{
	LPDISPATCH result;
	GetProperty(0xb, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetSaturation(LPDISPATCH propVal)
{
	SetProperty(0xb, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetSharpness()
{
	LPDISPATCH result;
	GetProperty(0xc, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetSharpness(LPDISPATCH propVal)
{
	SetProperty(0xc, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetGamma()
{
	LPDISPATCH result;
	GetProperty(0xd, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetGamma(LPDISPATCH propVal)
{
	SetProperty(0xd, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetColorEnable()
{
	LPDISPATCH result;
	GetProperty(0xe, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetColorEnable(LPDISPATCH propVal)
{
	SetProperty(0xe, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetWhiteBalance()
{
	LPDISPATCH result;
	GetProperty(0xf, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetWhiteBalance(LPDISPATCH propVal)
{
	SetProperty(0xf, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetBacklightCompensation()
{
	LPDISPATCH result;
	GetProperty(0x10, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetBacklightCompensation(LPDISPATCH propVal)
{
	SetProperty(0x10, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetGain()
{
	LPDISPATCH result;
	GetProperty(0x11, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetGain(LPDISPATCH propVal)
{
	SetProperty(0x11, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetPan()
{
	LPDISPATCH result;
	GetProperty(0x12, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetPan(LPDISPATCH propVal)
{
	SetProperty(0x12, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetTilt()
{
	LPDISPATCH result;
	GetProperty(0x13, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetTilt(LPDISPATCH propVal)
{
	SetProperty(0x13, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetRoll()
{
	LPDISPATCH result;
	GetProperty(0x14, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetRoll(LPDISPATCH propVal)
{
	SetProperty(0x14, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetZoom()
{
	LPDISPATCH result;
	GetProperty(0x15, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetZoom(LPDISPATCH propVal)
{
	SetProperty(0x15, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetExposure()
{
	LPDISPATCH result;
	GetProperty(0x16, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetExposure(LPDISPATCH propVal)
{
	SetProperty(0x16, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetIris()
{
	LPDISPATCH result;
	GetProperty(0x17, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetIris(LPDISPATCH propVal)
{
	SetProperty(0x17, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetFocus()
{
	LPDISPATCH result;
	GetProperty(0x18, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetFocus(LPDISPATCH propVal)
{
	SetProperty(0x18, VT_DISPATCH, propVal);
}

LPDISPATCH CVideoCap::GetAudioDevices()
{
	LPDISPATCH result;
	GetProperty(0x19, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetAudioDevices(LPDISPATCH propVal)
{
	SetProperty(0x19, VT_DISPATCH, propVal);
}

short CVideoCap::GetAudioDevice()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetAudioDevice(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

BOOL CVideoCap::GetCaptureAudio()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetCaptureAudio(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

short CVideoCap::GetVideoCompressor()
{
	short result;
	GetProperty(0x1c, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetVideoCompressor(short propVal)
{
	SetProperty(0x1c, VT_I2, propVal);
}

short CVideoCap::GetAudioCompressor()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetAudioCompressor(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

BOOL CVideoCap::GetUseVideoCompressor()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetUseVideoCompressor(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

BOOL CVideoCap::GetUseAudioCompressor()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetUseAudioCompressor(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

LPDISPATCH CVideoCap::GetAudioCompressors()
{
	LPDISPATCH result;
	GetProperty(0x20, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetAudioCompressors(LPDISPATCH propVal)
{
	SetProperty(0x20, VT_DISPATCH, propVal);
}

BOOL CVideoCap::GetShowPreview()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetShowPreview(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

BOOL CVideoCap::GetCaptureVideo()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetCaptureVideo(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

BOOL CVideoCap::GetAspectRatio()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetAspectRatio(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

unsigned long CVideoCap::GetBackgroundColor()
{
	unsigned long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CVideoCap::SetBackgroundColor(unsigned long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

LPDISPATCH CVideoCap::GetTVChannels()
{
	LPDISPATCH result;
	GetProperty(0x25, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetTVChannels(LPDISPATCH propVal)
{
	SetProperty(0x25, VT_DISPATCH, propVal);
}

short CVideoCap::GetCountryCode()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetCountryCode(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

short CVideoCap::GetChannel()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetChannel(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}

BOOL CVideoCap::GetTVMute()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetTVMute(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}

CVideoInputs CVideoCap::GetVideoInputs()
{
	LPDISPATCH pDispatch;
	GetProperty(0x29, VT_DISPATCH, (void*)&pDispatch);
	return CVideoInputs(pDispatch);
}

void CVideoCap::SetVideoInputs(LPDISPATCH propVal)
{
	SetProperty(0x29, VT_DISPATCH, propVal);
}

short CVideoCap::GetVideoInput()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetVideoInput(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

LPDISPATCH CVideoCap::GetWMVProfiles()
{
	LPDISPATCH result;
	GetProperty(0x2b, VT_DISPATCH, (void*)&result);
	return result;
}

void CVideoCap::SetWMVProfiles(LPDISPATCH propVal)
{
	SetProperty(0x2b, VT_DISPATCH, propVal);
}

short CVideoCap::GetWMVProfile()
{
	short result;
	GetProperty(0x2c, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetWMVProfile(short propVal)
{
	SetProperty(0x2c, VT_I2, propVal);
}

BOOL CVideoCap::GetOutputWMV()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetOutputWMV(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}

short CVideoCap::GetVideoStandard()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetVideoStandard(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}

short CVideoCap::GetFrameRate()
{
	short result;
	GetProperty(0x2f, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetFrameRate(short propVal)
{
	SetProperty(0x2f, VT_I2, propVal);
}

unsigned long CVideoCap::GetTextBgColor()
{
	unsigned long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CVideoCap::SetTextBgColor(unsigned long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

unsigned long CVideoCap::GetTextColor()
{
	unsigned long result;
	GetProperty(0x31, VT_I4, (void*)&result);
	return result;
}

void CVideoCap::SetTextColor(unsigned long propVal)
{
	SetProperty(0x31, VT_I4, propVal);
}

BOOL CVideoCap::GetTextFontBold()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetTextFontBold(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}

BOOL CVideoCap::GetTextFontItalic()
{
	BOOL result;
	GetProperty(0x33, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetTextFontItalic(BOOL propVal)
{
	SetProperty(0x33, VT_BOOL, propVal);
}

CString CVideoCap::GetTextFontName()
{
	CString result;
	GetProperty(0x34, VT_BSTR, (void*)&result);
	return result;
}

void CVideoCap::SetTextFontName(LPCTSTR propVal)
{
	SetProperty(0x34, VT_BSTR, propVal);
}

short CVideoCap::GetTextFontSize()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetTextFontSize(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

BOOL CVideoCap::GetTextFontUnderline()
{
	BOOL result;
	GetProperty(0x36, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetTextFontUnderline(BOOL propVal)
{
	SetProperty(0x36, VT_BOOL, propVal);
}

BOOL CVideoCap::GetTextBgTransparent()
{
	BOOL result;
	GetProperty(0x37, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetTextBgTransparent(BOOL propVal)
{
	SetProperty(0x37, VT_BOOL, propVal);
}

CString CVideoCap::GetWMVCustomFileName()
{
	CString result;
	GetProperty(0x38, VT_BSTR, (void*)&result);
	return result;
}

void CVideoCap::SetWMVCustomFileName(LPCTSTR propVal)
{
	SetProperty(0x38, VT_BSTR, propVal);
}

BOOL CVideoCap::GetBroadCast()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CVideoCap::SetBroadCast(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

short CVideoCap::GetBroadCastPortNo()
{
	short result;
	GetProperty(0x3a, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetBroadCastPortNo(short propVal)
{
	SetProperty(0x3a, VT_I2, propVal);
}

short CVideoCap::GetMaxClients()
{
	short result;
	GetProperty(0x3b, VT_I2, (void*)&result);
	return result;
}

void CVideoCap::SetMaxClients(short propVal)
{
	SetProperty(0x3b, VT_I2, propVal);
}

CString CVideoCap::GetPublishingURL()
{
	CString result;
	GetProperty(0x3c, VT_BSTR, (void*)&result);
	return result;
}

void CVideoCap::SetPublishingURL(LPCTSTR propVal)
{
	SetProperty(0x3c, VT_BSTR, propVal);
}

CString CVideoCap::GetLicenseKey()
{
	CString result;
	GetProperty(0x3d, VT_BSTR, (void*)&result);
	return result;
}

void CVideoCap::SetLicenseKey(LPCTSTR propVal)
{
	SetProperty(0x3d, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CVideoCap operations

short CVideoCap::Start()
{
	short result;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CVideoCap::Stop()
{
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CVideoCap::SnapShot(LPCTSTR strFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strFileName);
	return result;
}

BOOL CVideoCap::ShowVideoCapturePropertyPage()
{
	BOOL result;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CVideoCap::ScanTVChannels()
{
	BOOL result;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CVideoCap::ShowAudioCapturePropertyPage()
{
	BOOL result;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CVideoCap::ShowVideoFormatPropertyPage()
{
	BOOL result;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CVideoCap::ShowCrossbarPropertyPage()
{
	BOOL result;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CVideoCap::DrawTime(short iX, short iY, short iDateFormat)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iX, iY, iDateFormat);
}

void CVideoCap::ClearTime()
{
	InvokeHelper(0x47, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CVideoCap::DrawText(short iX, short iY, LPCTSTR strText)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iX, iY, strText);
	return result;
}

BOOL CVideoCap::SnapShotJPEG(LPCTSTR strFileName, short iJPEGQuality)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strFileName, iJPEGQuality);
	return result;
}

void CVideoCap::Pause()
{
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVideoCap::Resume()
{
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH CVideoCap::SnapShot2Picture()
{
	LPDISPATCH result;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long CVideoCap::SnapShot2HBITMAP()
{
	long result;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CVideoCap::ResizeControl(short iwidth, short iheight)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iwidth, iheight);
}

void CVideoCap::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
